package metrics

import (
	"strconv"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

var renderActivity = prometheus.NewGaugeVec(
	prometheus.GaugeOpts{
		Namespace: "houdini",
		Subsystem: "activity",
		Name:      "render_activity",
		Help:      "Render activity detected. Usually generated by file-cache node or rop render node",
	},
	[]string{"user", "frames_amount", "scene", "type"},
)

var renderedFrame = prometheus.NewGaugeVec(
	prometheus.GaugeOpts{
		Namespace: "houdini",
		Subsystem: "activity",
		Name:      "render_frame",
		Help:      "Render frame detected. Usually generated by file-cache node or rop render node",
	},
	[]string{"user", "frame", "scene", "type"},
)

type Frame struct {
	Start    time.Time
	End      time.Time
	Duration time.Duration
	Number   int
	Scene    string
	User     string
	Type     int
}

func RegisterPrometheusRenderMetric() {
	prometheus.MustRegister(renderActivity)
	prometheus.MustRegister(renderedFrame)

}

func RecordRenderedFrame(frame Frame) {
	renderedFrame.WithLabelValues(frame.User, strconv.Itoa(frame.Number), frame.Scene, strconv.Itoa(frame.Type)).Set(frame.Duration.Seconds())

}

func RecordRenderActivity(user string, start time.Time, end time.Time, totalFrames uint32, duration time.Duration, scene string, _type int64) {
	renderActivity.WithLabelValues(user, strconv.Itoa(int(totalFrames)), scene, strconv.FormatInt(_type, 10)).Set(duration.Seconds())
}
